[{"title":"C++ Notes(1): Lambda expressions","date":"2018-07-21T02:19:11.000Z","path":"2018/07/21/C-Notes-1-Lambda-expressions/","text":"“Lambda 表达式”是一个匿名函数，其基于数学中的 $\\lambda$ 演算得名，直接对应于其中的Lambda抽象，是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示闭包，但这一概念与数学上的闭包不同。本文旨在介绍Lamda表达式的语法规则以及在程序中的常规用法。 Lambda expressions $\\lambda$ 演算可以被称为最小的通用程序设计语言。它包括一条变换规则 (变量替换) 和一条函数定义方式， $\\lambda$ 演算之通用在于，任何一个可计算函数都能用这种形式来表达和求值。在 $\\lambda$ 演算中，每个表达式都代表一个只有单独参数的函数，这个函数的参数本身也是一个只有单一参数的函数，同时，函数的值又是一个只有单一参数的函数。函数是通过 $\\lambda$ 表达式匿名地定义的，这个表达式说明了此函数将对其参数进行什么操作。例如，函数 $f(x)=x+2$ 可以用 λ 演算表示为 $\\lambda\\ \\ x.x+2$。在C++语言中，其语法规则如下: ▌语法形式1234(1) [captures] &lt;tparams&gt;(可选) (params) specifiers(可选) -&gt; ret &#123;body&#125;(2) [captures] (params) -&gt; ret &#123;body&#125; (3) [captures] (params) &#123;body&#125;(4) [captures] &#123;body&#125; 上述语法中：(1) Lambda表达式的完整声明。(2) const lambda 的声明：以复制捕获的对象在 lambda 体内为 const 。(3) 省略尾随返回类型：从 return 语句推导闭包的 operator() 的返回类型，如同对于声明返回类型为 auto 的函数。(4) 省略参数列表：函数不接收参数，即参数列表为 () 。仅当不使用constexpr、mutable、异常规定、属性或尾随返回类型之一才能使用此形式。 ▌语法解释| 参数 | 解释 || ———————————————– | —————————————————————————- || captures | 表达式捕获参数 || \\&lt;tparams> | 模板形参列表（于角括号中），用于提供名称给泛型表达式的模板形参 || params | 形参列表 || specifiers | 可选的指定符序列。允许下列指定符：mutable：允许 body 修改已复制的捕获参数，及调用其non-const 成员函数exception：说明表达式是否抛出异常以及何种异常attribute：用来声明属性 || ret | 返回类型，若缺失，则由函数的return语句推断返回值类型（或若函数不返回任何值则为void） || body | 匿名函数体 |","tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"}]},{"title":"Hello, I'm Jaxin","date":"2018-07-11T01:12:52.000Z","path":"2018/07/11/Hello-I-m-Jaxin/","text":"“经霜雪而无迹，照日光而无景，扶摇抮抱羊角而上，经纪山川，蹈腾昆仑。” 序值此开博，谢@Homxu相助。此间诸博客，或为远近见闻，或为理论研究，或为捉虫游戏，或为其他杂文散记，行之至远，方得趣味。今博客既成，日后若以他人学识为纲，未免白费一番心思，自当以个人见解，驱虫以得草木之茵茵。总之，我们的宗旨是：兄长，我想带一虫回云深不知处，带回去，藏起来( • ̀ω•́ )✧。 “事实是，当你犹豫要不要去做一件事的时候，其实你内心已经有了选择，只是你还没有充足的理由去说服自己。”东野圭吾《解忧杂货铺》 So, let’s go.","tags":[{"name":"闲广录","slug":"闲广录","permalink":"http://yoursite.com/tags/闲广录/"}]},{"title":"Hello World","date":"2018-07-11T00:47:05.517Z","path":"2018/07/11/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]