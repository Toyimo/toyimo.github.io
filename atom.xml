<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome here, this is Jaxin&#39;s littel nest.</title>
  <icon>https://www.gravatar.com/avatar/a1acb8ae2f264848ba5bde4442a8992d</icon>
  <subtitle>我们的愿望是世界和平 (～￣▽￣)～</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-22T08:51:27.774Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jiaxing TONG</name>
    <email>tongjiaxing1996@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ Notes(1): Lambda expressions</title>
    <link href="http://yoursite.com/2018/07/21/C-Notes-1-Lambda-expressions/"/>
    <id>http://yoursite.com/2018/07/21/C-Notes-1-Lambda-expressions/</id>
    <published>2018-07-21T02:19:11.000Z</published>
    <updated>2018-07-22T08:51:27.774Z</updated>
    
    <content type="html"><![CDATA[<p>“Lambda 表达式”是一个匿名函数，其基于数学中的 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">λ</span></span></span></span> 演算得名，直接对应于其中的Lambda抽象，是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示闭包，但这一概念与数学上的闭包不同。本文旨在介绍Lamda表达式的语法规则以及在程序中的常规用法。</p><a id="more"></a><h2 id="lambda-expressions-syntax"><a class="markdownIt-Anchor" href="#lambda-expressions-syntax"></a> <strong>Lambda Expressions Syntax</strong></h2><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">λ</span></span></span></span> 演算可以被称为最小的通用程序设计语言。它包括一条变换规则 (变量替换) 和一条函数定义方式， <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">λ</span></span></span></span> 演算之通用在于，任何一个可计算函数都能用这种形式来表达和求值。<br><br>在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">λ</span></span></span></span> 演算中，每个表达式都代表一个只有单独参数的函数，这个函数的参数本身也是一个只有单一参数的函数，同时，函数的值又是一个只有单一参数的函数。函数是通过 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding="application/x-tex">\lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.69444em;vertical-align:0em;"></span><span class="base textstyle uncramped"><span class="mord mathit">λ</span></span></span></span> 表达式匿名地定义的，这个表达式说明了此函数将对其参数进行什么操作。例如，函数 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>x</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">f(x)=x+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathrm">2</span></span></span></span> 可以用 λ 演算表示为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>λ</mi><mtext> </mtext><mtext> </mtext><mi>x</mi><mi mathvariant="normal">.</mi><mi>x</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\lambda\ \ x.x+2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.69444em;"></span><span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="base textstyle uncramped"><span class="mord mathit">λ</span><span class="mord mspace"> </span><span class="mord mspace"> </span><span class="mord mathit">x</span><span class="mord mathrm">.</span><span class="mord mathit">x</span><span class="mbin">+</span><span class="mord mathrm">2</span></span></span></span>。<br><br>在C++语言中，其语法规则如下:<br></p><p><strong>▌语法形式</strong><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[captures] &lt;tparams&gt;(可选) (params) specifiers(可选) -&gt; ret &#123;body&#125;</span><br><span class="line">[captures] (params) -&gt; ret &#123;body&#125;</span><br><span class="line">[captures] (params) &#123;body&#125;</span><br><span class="line">[captures] &#123;body&#125;</span><br></pre></td></tr></table></figure><p style="font-size:14px;line-height:25px">上述语法中：<br>(1) Lambda表达式的完整声明。<br>(2) 声明了<code>const</code>类型的表达式，这种类型的表达式不能修改捕获列表中的值。<br>  (3) 省略了返回值类型，但编译器可以根据以下规则推断出Lambda表达式的返回类型：<br>- 如果函数体中存在<code>return</code>语句，则返回类型由<code>return</code>语句的返回类型确定;<br>- 如果函数体中没有<code>return</code>语句，则返回值为<code>void</code>类型.<br>(4) 省略参数列表：函数不接收参数，即参数列表为 <code>()</code>，类似于普通函数中的无参函数。</p><p><strong>▌语法解释</strong><br></p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td><strong><font face="Courier New">captures</font></strong></td><td>表达式捕获外部参数列表，其有如下形式：<br><code>[];[&amp;];[=];[=,&amp;foo];[bar];[this]</code></td></tr><tr><td><strong><font face="Courier New">&lt;tparams&gt;</font></strong></td><td>模板形参列表（于角括号中），用于提供名称给泛型表达式的模板形参</td></tr><tr><td><strong><font face="Courier New">params</font></strong></td><td>形参列表</td></tr><tr><td><strong><font face="Courier New">specifiers</font></strong></td><td>可选的指定符序列。允许下列指定符：<br><code>mutable</code>：允许 <code>body</code> 修改已复制的捕获参数，及调用其<code>non-const</code> 成员函数<br><code>exception</code>：说明表达式是否抛出异常以及何种异常<br><code>attribute</code>：用来声明属性</td></tr><tr><td><strong><font face="Courier New">ret</font></strong></td><td>返回类型，若缺失，则由函数的<code>return</code>语句推断返回值类型（或若函数不返回任何值则为<code>void</code>）</td></tr><tr><td><strong><font face="Courier New">body</font></strong></td><td>匿名函数体</td></tr></tbody></table><h2 id="properties-of-lambda-expressions"><a class="markdownIt-Anchor" href="#properties-of-lambda-expressions"></a> <strong>Properties of Lambda Expressions</strong></h2><p>下图映射了上文所介绍的Lambda表达式的语法规则<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>：<br><img src="https://i-msdn.sec.s-msft.com/dynimg/IC251606.png" alt="Lambda语法" title="Lambda Gramma"></p><p style="font-size:14px;line-height:25px"><br>图中标注的含义如下：<br>(1) 表达式捕获外部参数列表；<br>(2) 形参列表；<br>(3) 可选的指定符序列：可变指定符；<br>(4) 可选的指定符序列：异常指定符；<br>(5) 返回类型；<br>  (6) 表达式的匿名函数体。<br></p><p>这里需要详细介绍捕获外部参数列表中参数的几种形式，网络中大多数列子都用到了这一部分的内容<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>：<br>-<code>[]</code>：没有使用任何函数对象参数。<br>-<code>[=]</code>：函数体内可以使用Lambda所在作用范围内所有可见的局部变量（包括Lambda所在类的<code>this</code>），并且是值传递方式（相当于编译器自动为我们按值传递了所有局部变量）。<br>-<code>[&amp;]</code>：函数体内可以使用Lambda所在作用范围内所有可见的局部变量（包括Lambda所在类的<code>this</code>），并且是引用传递方式（相当于编译器自动为我们按引用传递了所有局部变量）。<br>-<code>[this]</code>：函数体内可以使用Lambda所在类中的成员变量。<br>-<code>[bar]</code>：将bar按值进行传递。按值进行传递时，函函数体内不能修改传递进来的bar的拷贝，因为默认情况下函数是<code>const</code>的。要修改传递进来的bar的拷贝，可以添加<code>mutable</code>修饰符。<br>-<code>[&amp;foo]</code>：将foo按引用进行传递。<br>-<code>[bar,&amp;foo]</code>：将bar按值进行传递，foo按引用进行传递。<br>-<code>[=,&amp;a,&amp;b]</code>：除a和b按引用进行传递外，其他参数都按值进行传递。<br>-<code>[&amp;,a,b]</code>：除a和b按值进行传递外，其他参数都按引用进行传递。</p><h2 id="examples"><a class="markdownIt-Anchor" href="#examples"></a> <strong>Examples</strong></h2><p><br><br><br><br></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>cppreference.Lambda 表达式.<a href="https://zh.cppreference.com/mwiki/index.php?title=cpp/language/lambda&amp;variant=zh#Lambda_.E6.8D.95.E8.8E.B7" target="_blank" rel="noopener">Link</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>微软帮助中心.Lambda Expression Syntax.<a href="https://msdn.microsoft.com/zh-cn/library/azure/dd293603(v=vs.120).aspx" target="_blank" rel="noopener">Link</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>糖炒栗子Sugar.C++ Lambda表达式用法.<a href="https://www.cnblogs.com/alwayswangzi/p/7137427.html" target="_blank" rel="noopener">Link</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“Lambda 表达式”是一个匿名函数，其基于数学中的 &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;λ&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;\lambda&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.69444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;strut bottom&quot; style=&quot;height:0.69444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;base textstyle uncramped&quot;&gt;&lt;span class=&quot;mord mathit&quot;&gt;λ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 演算得名，直接对应于其中的Lambda抽象，是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示闭包，但这一概念与数学上的闭包不同。本文旨在介绍Lamda表达式的语法规则以及在程序中的常规用法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello, I&#39;m Jaxin</title>
    <link href="http://yoursite.com/2018/07/11/Hello-I-m-Jaxin/"/>
    <id>http://yoursite.com/2018/07/11/Hello-I-m-Jaxin/</id>
    <published>2018-07-11T01:12:52.000Z</published>
    <updated>2018-07-20T14:27:40.275Z</updated>
    
    <content type="html"><![CDATA[<center>    <img src="https://sharvaridesai.github.io/hexo-theme-edinburgh-demo//images/unsplash3.jpg" width="100%" height="100%">         <font face="黑体" size="8"><sub>“</sub></font>经霜雪而无迹，照日光而无景，扶摇抮抱羊角而上，经纪山川，蹈腾昆仑。<font face="黑体" size="14"><sub><sub>”</sub></sub></font></center><a id="more"></a><h2 id="序"><a class="markdownIt-Anchor" href="#序"></a> 序</h2><p>值此开博，谢@<a href="https://homxuwang.github.io/" target="_blank" rel="noopener">Homxu</a>相助。此间诸博客，或为远近见闻，或为理论研究，或为捉虫游戏，或为其他杂文散记，行之至远，方得趣味。今博客既成，日后若以他人学识为纲，未免白费一番心思，自当以个人见解，驱虫以得草木之茵茵。<br><br>总之，我们的宗旨是：兄长，我想带一虫回云深不知处，带回去，藏起来( • ̀ω•́ )✧。</p><blockquote><p><font face="黑体">“事实是，当你犹豫要不要去做一件事的时候，其实你内心已经有了选择，只是你还没有充足的理由去说服自己。”</font></p><p align="right">东野圭吾《解忧杂货铺》</p><p></p></blockquote><p>So, let’s go.</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;
    &lt;img src=&quot;https://sharvaridesai.github.io/hexo-theme-edinburgh-demo//images/unsplash3.jpg&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;     
    &lt;font face=&quot;黑体&quot; size=&quot;8&quot;&gt;&lt;sub&gt;“&lt;/sub&gt;&lt;/font&gt;经霜雪而无迹，照日光而无景，扶摇抮抱羊角而上，经纪山川，蹈腾昆仑。&lt;font face=&quot;黑体&quot; size=&quot;14&quot;&gt;&lt;sub&gt;&lt;sub&gt;”&lt;/sub&gt;&lt;/sub&gt;&lt;/font&gt;
&lt;/center&gt;
    
    </summary>
    
      <category term="I&#39;m Jaxin" scheme="http://yoursite.com/categories/I-m-Jaxin/"/>
    
    
      <category term="闲广录" scheme="http://yoursite.com/tags/%E9%97%B2%E5%B9%BF%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/11/hello-world/"/>
    <id>http://yoursite.com/2018/07/11/hello-world/</id>
    <published>2018-07-11T00:47:05.517Z</published>
    <updated>2018-07-11T00:47:05.517Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
